**** ABANS DE L'EXAMEN POSAR AQUEST FITXER A DADES ****


d(t) = A*sin(w*t+fase) 
    A = amplitud
    w = 2*PI*frequencia
    t = uniform float time
    fase(inicial) = o ens la donen o no n'hi ha. Un int 
  
  vertexAux.x += dist * normal.x;
  vertexAux.y += dist * normal.y;
  vertexAux.z += dist * normal.z;
  multiplicar (dist * normal) component a component fara que s'expandexi i es contragui en comptes d'aplicar translació
  
  
frame = int(time/slice) % 4; Per augmentar els fps, fem que el terme a l'esquerre del % sigui mes gran. +gran == +rapid el canvi

gl_FragCoord: (in vec4 gl_FragCoord)
Available only in the fragment language, gl_FragCoord is an input variable that contains the window relative coordinate (x, y, z, 1/w)

gl_Position — contains the position of the current vertex
---------------------------------------------------------------------------------------------------------------------------------------
distance(boundingBoxMin, boundingBoxMax);	
    distance es una funcio predefinida, i en aquest cas fa el calcul de la diagonal de la capsa contenidora, ojo perque jo ho
             havia fet amb x,y. I estem en 3D, soc retra.
MATRIUS:
    es llegeixen per columnes->   1,2,3         mat3( vec3(1,4,7),
                                  4,5,6               vec3(4,5,6),
                                  7,8,9               vec3(3,6,8)) 
 _____________________________________________________________________________________________________________________________________                                 

Array               [0] [1] [2] [3]
Coordinate          .x  .y  .z  .w
Color channel       .r  .g  .b  .a
Texture             .s  .t  .p  .q

clamp(x, minimum, maximum)      == min(max(x,minimum),maximum)          //returns the value of x constrained to the range minVal to maxVal
mix(a,b,ratio)                  == (1-ratio)*a + ratio*b                //ponderar
length(vec2(x,y))               == sqrt(x*x+y*y)                        //modul
distance(A,B)                   == length(B-A)                          //distancia entre 2 punts
normalize(vector)               == vector/length(vector)                //normalitza vec --> el seu modul es = 1 
dFdx(value)                     //només al fragment     derivada respecte x
dFdy(value)                     //només al fragment     derivada respecte y
